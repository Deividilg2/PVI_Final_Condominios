@model PVI_Final_Condominios.Models.CobrosModels
@{
    ViewBag.Title = "CrearCobros";
}


<h2>Crear Cobros</h2>

<form method="post" id="myform">
    @Html.HiddenFor(model => model.idcobro)
    <div class="md-3">
        <label class="form-label" for="idCliente">Cliente</label>
        <select disabled id="idCliente" name="idCliente" class="form-control">
            <option value="">Seleccione un cliente</option>
        </select>
    </div>

    <div class="md-3">
        <label class="form-label" for="idCasa">Casa</label>
        <select disabled id="idCasa" name="idCasa" class="form-control">
            <option value="">Seleccione una casa</option>
        </select>
    </div>

    <div class="md-3">
        <label class="form-label" for="anno">Año</label>
        <select disabled id="anno" name="anno" class="form-control">
            <option value="">Seleccione un año</option>
        </select>
    </div>

    <div class="md-3">
        <label class="form-label" for="mes">Mes</label>
        <select disabled id="mes" name="mes" class="form-control">
            <option value="">Seleccione un mes</option>
        </select>
    </div>

    <div class="mt-2 mb-3">
        @foreach (var servicio in ViewBag.servicios)
        {
            <div class="mt-1">
                @*El atributo "name" es el que pasamos abajo en el js para definir que es requerido para poder guardar*@
                <input type="checkbox" id="servicioSeleccionado_@servicio.Id_servicio" name="servicios" value="@servicio.Id_servicio" 
                       @if (ViewBag.serviciosSeleccionados != null)
                       {//Codigo que nos permite tomar la lista almacenada en el viewbag para seleccionar los checkbox
                        @((ViewBag.serviciosSeleccionados).Contains(servicio.Id_servicio) ? "checked" : "") //verificamos un valor específico dentro de la lista con Contains() en este caso es Id_servicio } />
                       }/>
                <label class="form-label" for="servicioSeleccionado_@servicio.Id_servicio">@servicio.Column4 : @servicio.Nombre</label>
            </div>
        }
    </div>

    <input type="submit" id="Guardado" class="btn btn-primary" value="Guardar" />
    <a href="/Cobros/ConsultarCobros" class="btn btn-secondary">Regresar</a>
</form>


@if (ViewBag.Estadocasa != null)//Nota: Se recarga la pagina al coincidir y se borran los datos selecionados
{
    <div id="modalAlert" title="Alerta">
        <p>No se ha logrado realizar el cobro debido a que existe un cobro pendiente en la casa elegida</p>
    </div>
}


@ViewBag.resultado



@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/ValidacionesGenericas 1.js"></script>
    <script type="text/javascript">
                $("#myform").validate({
                rules: {
                 'idCliente': {
                     required: true
                 },
                 'idCasa': {
                     required: true,
                 },
                 'anno': {
                     required: true
                 },
                 'costo': {
                     required: true
                 },
                 'mes': {
                     required: true
                 },
                 'servicios': {
                     required: true
                 }
            },

            submitHandler: function (form) {
                guardarServicios();
            }

         });


        function guardarServicios() {
            var data = {
                idcobro: $("#idcobro").val(),
                idCliente: $("#idCliente").val(),
                idCasa: $("#idCasa").val(),
                anno: $("#anno").val(),
                mes: $("#mes").val(),
            }

             //Obtenemos todos los checkboxes seleccionados
             var checkboxes = document.querySelectorAll("input[name='servicios']:checked");

             //Creamos un arreglo para almacenar los valores de los checkboxes que seleccionamos
             var serviciosSeleccionados = [];
             checkboxes.forEach((checkbox) => {
                 serviciosSeleccionados.push(parseInt(checkbox.value, 10)); // Convertimos a entero
             });

             console.log(data, serviciosSeleccionados);
             $.post('/Cobros/CrearCobros', { cobro: data, servicioSeleccionado: serviciosSeleccionados }, function (data) {
                 alert(data);
             });
         }


        function loadDropdown(url, parametros, ddl, selected) {//Parametros que va a recibir nuestra funcion
            $.post(url, parametros, function (data) {//Elegimos el metodo por el que sera enviado
                $(data).each(function () {
                    var option = new Option(this.Nombre, this.Id);
                    if (this.Id == selected) {
                        option.selected = true;
                    }
                    ddl.append(option);
                });
            });
        };



        $(document).ready(function () {
            var idcliente = @((this.Model != null) ? this.Model.idCliente : 0);
            var idcasa =@((this.Model !=null) ? this.Model.idcasa :0 );
            var anno = @((this.Model !=null) ? this.Model.anno :0 );
            var mes = @((this.Model !=null) ? this.Model.mes :0 );

            loadDropdown("/Cobros/DdlClientes", {}, $("#idCliente"), idcliente);
            if (idcasa != 0) {
                loadDropdown("/Cobros/DdlCasas", { Id: idcliente }, $("#idCasa"), idcasa);
            }
            loadDropdown("/Cobros/DdlAnnos", {}, $("#anno"), anno);
            loadDropdown("/Cobros/DdlMeses", {}, $("#mes"), mes);

            //Alerta que salta cuando la casa ya tiene un cobro pendiente
            $("#modalAlert").dialog({
                dialogClass: "alert",
                autoOpen: true,
                buttons: [
                    {
                        text: "OK",
                        click: function () {
                            $(this).dialog("close");
                        }
                    }
                ]
            });
        });

    </script>
}